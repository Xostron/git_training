git --version версия git
git config --global user.name "ИМЯ" установить глобально (для всех проектов) автор коммита
git congig --global user.email "EMAIL" установить глобально email автора

Типы сообщений:
fix исправление бага
feat новая функциональность
docs изменение в документации
refactor рефакторинг без изменения поведения
style форматирование кода, верстка
test тесты

Настройки
git config --global user.name "ИМЯ" установить глобально (для всех проектов) автор коммита
git congig --global user.email "EMAIL" установить глобально email автора

Команды
git --version версия git
git clone url/repo.git клонировать репозиторий в текущую папку (копируется также и индекс Git)
git init инициализация репозитория
git add . - зафиксировать (добавить) все изменения
git add имя_файла - зафиксировать новый/измененный файл
git commit -m "комментарий" - закоммитить изменение

Ветки
git branch test-2 создать ветку test-2
git checkout test-2 переключиться на ветку test-2
git checkout -b test-2 создать и переключиться на ветку test-2 сразу
git checkout main переключиться обратно на основную ветку
git merge master - находясь на ветке test-2, выполнить слияние c веткой master
git branch - показать локальные ветки (*текущая ветка) название основной ветки по-умолчанию main, master
git branch -d имя_ветки - удалить локальную ветку

Удаленный репо (подключение)
git remote add origin https://github.com/Xostron/git_training.git привязка к удаленному гиту
git push -u origin master - отправка изменений ветки master впервые
git push отправка изменений последующие
git pull вытянуть изменения из удаленного сервера в рабочую директорию

Отмена изменений (локальный гит)
git checkout -- test2.txt отменить изменения в фалйе (все будет удалено)
git reset HEAD test2.txt отменить добавление git add
git commit -amend -m "Изменить комментарий" изменить последний коммит (если он еще не отправлен на удлаенные репо - не запушен)
git reset --soft HEAD~1 удалить последний коммит, но оставить изменения в рабочей директории

Удаление файлов
git rm путь_к_файлу - удалить файл из рабочей директории и индекса
git rm --cashed путь_к_файлу удалить файл только из индекса

Временные изменения (скрыть изменения)
git stash - временно сохраняет незавершенные изменения в рабочей директории и индексе
    позволяя "отложить" их (черновик) и вернуться к чистой рабочей копии. 
    Полезно в ситуациях, когда нужно быстро переключиться на другую задачу или ветку (пофиксить баг):
    например, добавляешь функционал, тут быстро нужно исправить баг и запушить исправление, 
    скрываем stash свои наработки, это возвращает нас к изначальной версии (чистовой), делаем исправление и пушим, 
    теперь можно продолжить работу над новым функционалом которые скрыты, возвращаем наработки командой git stash pop и продолжаем
git stash pop вернуть последнее изменение и удалив черновик
git stash apply вернуть последнее изменение не удаляя черновик
git stash apply stash@{1} вернуть конкретный черновик 
git stash drop удалить последний черновик
git stash drop stash@{1} удалить конкретный черновик
git stash list список изменений, пример stash@{0}: WIP on master: 0afe256

Тэги - отметка релизов
git tag v1.0.0 - создать тэг
git tag -a v1.0.0 -m "comment"
git tag список тэгов
git checkout v1.0.0 переключиться на тэг
git push --tags отправить тэги на удаленный сервер

Логическое добавление изменений
git add -p - поэтапное добавление блоков изменений, можно добавить/пропустить/разделить блок/отредактировать в ручную

Rebase - История коммитов (объединение коммитов)
git checkout branch-1 
git rebase main выполнить в ветке branch-1, объединение коммитов
git rebase --continue
Важно: не используйте rebase если ветки уже опубликованы
тест 1 ветка master
тест 1 branch feature

Подмодули - Включить другой репозиторий в проект (общие библиотеки)
git submodule add https://github.com/username/repo.git path_to_submodule подключить к проекту библиотеку из другого репо
git clone --recurse-submodules https://github.com/username/repo.git клонировать проект с подмодулями
git submodule update --remote обновить Подмодули

git hook - хуки хранятся в папке .git/hooks

git bisect start поиск забагованного коммита
git bisect bad Текущий коммит содержит баг
git bisect good Текущий коммит ОК
git bisect reset Завершить поиск